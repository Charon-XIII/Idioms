Для создания данного проекта, было использован стек:
Flask - микрофреймворк для создания веб-приложений на ЯП Python.(backend)
pip install Flask команда в терминале для установки пакета

Bootstrap4 - набор инструментов для создания дизайна веб-приложения.(frontend)

По начальной задумке, я хотел использовать парсер данных для всей работы, но столкнулся с некоторыми трудностями:
1. В интернете не достаточно информации о выбранной теме.
2. Перевод фразеологизмов не достоверен через переводчик.
3. Не возможно создать скрипт, который мог бы определить признаки полесимии фразеологизма.

Я пришел к тому, что будет правильней сформулировать базу фразеологизмов. В качестве базы, решил использовать популярный формат файла JSON. Данный объект содержит в себе словарь фразеологизмов. Ключом словоря является сам фраз., значением выступает список с такими элементами как:
1. Значение фраз.
2. Пример с фраз.
3. Возможные синонимы фразеологизмы.
4. Признаки на полисимию в фразеологизме.
Пример файла idioms.json:
{'Ақ көңіл': ['қайырымды, мейірбан, мейірімді, рақымды, игі, ізгі', 'Ақкөңілдің аты арып, тоны тозбас', 'ақ көңіл <--> ақ жүрек <--> ақ пейілді жұмсақ <--> көңілді', ''], 'Ақылға сыймау': ['ақыл жетпейтін, мүлде түсініксіз, түсінбеу, түсінбеушілік', 'Америкалық "Ақылға сыймайтын ашылулар шежірешілері"', '', ''], 'Aла қаптың аузын ашу': ['ортаға салды, бәрін төкті, сырын аитты', 'Ала қаптың аузын аш!', '', '']}

На главной странице проекта, есть форма получения данных, 3 кнопки, и блок в котором отображается вся информация. При вводе данных(POST запрос), в файле main.py функция index() принимает в переменную p значение которое ввел пользователь. Переменная sentence принимает то, что возвращает функцию search(). Атрибутом функции search является ранее известная переменная p. Функция search находится в файле phrases. Данная функция в первую очередь записывает введенную идиому(фразеологизм) в файл show_last_idiom.json(для последующей работы), затем читает файл idioms_items.json. Если данный файл(idioms_items.json) содержит в себе ту идиому который ввел пользователь(переменная р), открывается файл idioms_items.json и выводится вся возможная информация о нем. Если этой идиомы нет, то выходит сообщение "Not found". Вернемся в файл main.py. Если фразеологизма нет, выводится сообщение об этом, если оно присутствует то выводится соответсвующая информация. 

Если пользователь пожелал создать свою собственную идиому со всеми вытекающими, он нажимает на кнопку "Жасау". Данная кнопка переносит нас в функцию create в файле main.py, а пользователя на страницу create.html. Данный шаблон содержит в себе 6 форм для принятия данных. Первую форму мы уже знаем(форма поиска). Остальные 5 форм принимают всю необходимую информацию, затем отправляются в нашу функцию create для дальнейшей обработки. Получив данные от пользователся, мы используем их в качестве атрибутов для функции create из файла phrases.py. Данная функция в первую очередь создает маску для возможных синономиов и полисимий. Маска представляет из себя фраз разделенных таким знаком: <-->. Затем функция create записывает все полученные данные в файл idioms.json. Далее записывает идиому в список(в файл idioms_items.json). Сохраняем новую идому во всех файлах. Возвращаем только что созданную идиому пользователю для отображения на странице. 

Если пользователь решил редактировать одну из идиом, он вводит её в поисковик, находит её, и нажимает на кнопку "Жөндеу". Данная кнопка переносит нас в функцию editв файле main.py, а пользователя на страницу edit.html. Этот шаблон содерижт те же компоненты что и шаблон create.html лишь за одним исключением. В формах заполения уже присутствуют данные которые необходимо редактировать. Как это получилось: при поиске идиомы, в файле show_last_idiom.json было сохранено имя идиомы. Функция edit() из файла main.py данную идиому возвратило на страницу с формами благодаря функции search из файла phrases. Затем происходит POST запрос, пользователь изменил все возможные данные и отправил нам на сервер для обработки. Мы получаем данные и указываем их в качестве атрибутов в функции edit() из файла phrases. Функция edit() в первую очередь удаляет идиому(с её данными) которую мы хотим редактировать. Затем происходит такой же процесс как и в функции create. После всей проделанной процедуры, мы возвращаем только что отредактированную идиому пользователю для отображения на странице. 


Если пользователь пожелал удалить идиому, он нажимает на кнопку "Жою". Сервер получил запрос в функцию delete()(файл main.py). Функция перенаправляет нас в файл phrases, в функцию delete(). Это функция открывает файл с идиомой(с которой последний раз взаимодействовал пользователь). Затем удаляет все данные об этой идиоме со всех файлов. 